#+title: Template
This is the template, which defines some common functions for all scripts.

* Usage
#+begin_example
  $ . setup-template.sh [-v VERSION]
#+end_example

** Version
The version you want to install. Defaults to the [[*Default version][default version]].

** Overriding of functions
The template can be included into the software specific scripts, where specific functions can be overridden.
*NOTE*: By including scripts, you have to be careful, with execution of scripts, since these are executed during the inclusion and therefore before anything else!

#+begin_src shell :tangle no
  f1() {
      echo "Foo f1: To override"
  }

  f2() {
      echo "Foo f2: Not to override"
  }

  # To override
  main() {
      f1
      f2
  }

  main
#+end_src
#+begin_src shell :tangle no
  . $(dirname ${BASH_SOURCE[0]})/foo.sh

  f1() {
      echo "Bar f1: To override"
  }

  f3() {
      f2
      echo "Bar f3: Not to override"
  }

  main() {
      f1
      f3
  }

  main
#+end_src

* Implementation
In general, the execution of all scripts follows these common steps:
1. Initialize global variables.
2. Override global variables given by options.
3. Check, whether the wanted version is already installed.
4. If not:
   1. Restore PATH and other installation relevant exported variables, which may have been set by a previous installation.
   2. Export PATH and other relevant variables.
   3. Install the wanted version.
5. Clean up the global variables after installation, but not the exported ones.
6. Print success message.

If something goes wrong, abort. This means, restore the PATH and other global variables:
#+name: main
#+begin_src shell
  __sp_main() {
      init_global_vars
      set_vars_from_opts ${@}

      if ! is_installed; then
	  echo "Start installation"
	  restore_exported_vars
	  export_vars
	  install || abort
      fi

      reset_global_vars
      print_success_message
  }
#+end_src
#+name: lib
#+begin_src org :noweb yes :exports none
  <<init_global_vars>>
  <<reset_global_vars>>
  <<set_vars_from_opts>>
  <<abort>>
  <<local_installation_file_path>>
  <<remote_installation_file_exists>>
  <<download_installation_file>>
  <<install>>
  <<main>>
#+end_src
#+begin_src shell :tangle src/setup-template.sh :mkdirp yes :noweb yes :shebang #!/bin/sh :tangle-mode '#o644 :exports none
  <<lib>>

  <<default_version>>
  <<export_vars>>
  <<restore_exported_vars>>
  <<installation_path>>
  <<is_installed>>
  <<installation_file>>
  <<install_installation_file>>
  <<download_url>>
  <<print_success_message>>

  __sp_main ${@}
#+end_src

** Global variables
Each script uses some global variables, like the version to install. These have to be initialized for each run of the script. The initialization of this variables might be the same for all scripts. The only exception is the definition of the [[Default version][default version]], which is described later:
#+name: init_global_vars
#+begin_src shell
  init_global_vars() {
      __sp_version=$(default_version)
      __sp_installation_base_dir=$HOME/opt
      # Reset OPTIND, if getopts was used before
      OPTIND=1
  }
#+end_src

The reset of global variables depends on the initialization. It is necessary to clean up, after the script ran successful or was aborted, because of an error. If ~init_global_vars~ was adopted in a script,  ~reset_global_vars~ variables might need to be adjusted as well:
#+name: reset_global_vars
#+begin_src shell
  reset_global_vars() {
      unset __sp_version
      unset __sp_installation_base_dir
      # Reset OPTIND for future use of getopts
      OPTIND=1
  }
#+end_src

*** Default version
Since the strings for version (and therefore default version) are specific to the software, at least the function retrieving the default version has to be adapted in the particular scripts:
#+name: default_version
#+begin_src shell
  default_version() {
      echo tmpl_default-version
  }
#+end_src

*** Options
To pass options (like the version to be installed) to the scripts /getopts/ is used:
#+name: set_vars_from_opts
#+begin_src shell
  set_vars_from_opts() {
      while getopts v: opt; do
	  case $opt in
	      v) __sp_version=$OPTARG
		 ;;
	  esac
      done
  }
#+end_src
At least the version needs to be set, but other scripts might need additional options. Therefore this method might be overridden.

*** Exported variables
The ~PATH~ variable and every other global variable, which is exported by the scripts might exist before the script is run and therefore must be saved and restored, if something goes wrong. In the following example, the ~PATH~ is saved before the new one is exported:
#+name: export_vars
#+begin_src shell
  export_vars() {
      echo "Add $(installation_path) to PATH"
      __SP_TMPL_ORIGINAL_PATH="${PATH}"

      export PATH="$(installation_path):${PATH}"
  }
#+end_src
*NOTE*: It is important to have an unique name for the backup variables!

The corresponding reset function restores the ~PATH~ and deletes the backup, to clean up the environment:
#+name: restore_exported_vars
#+begin_src shell
  restore_exported_vars() {
      if [ -v __SP_TMPL_ORIGINAL_PATH ]; then
	  export PATH="${__SP_TMPL_ORIGINAL_PATH}"
	  unset __SP_TMPL_ORIGINAL_PATH
      fi
  }
#+end_src

*** Installation path
Since the installation path might be different, depending on the target OS and the software, it is declared as a function, which can be overridden:
#+name: installation_path
#+begin_src shell
  installation_path() {
      echo $__sp_installation_base_dir/tmpl-$__sp_version
  }
#+end_src

** Check, if wanted version is installed
Before starting the installation, check if the wanted version is already installed. This should usually execute the wanted command and check the output for the correct version. In this template this is just a mock, which returns true, if the given version is ~installed~:
#+name: is_installed
#+begin_src shell
  is_installed() {
      case "$__sp_version" in
	  installed) return 0
	      ;;
	  ,*) return 1
	      ;;
      esac
  }
#+end_src

** Install wanted version
If the wanted version is not installed, start the installation. This includes the following steps:
1. Check if an installation file for the current OS is present.
   1. If not, download correct installation file and proceed with next step.
      1. If no download file could be found, abort installation with an error message.
2. Install version with this installation file.
#+name: install
#+begin_src shell
  install() {
      echo "Install version: $__sp_version"

      if [ ! -f $(local_installation_file_path) ]; then
	  echo "Local installation file not found: $(local_installation_file_path). Try, download new one"
	  if remote_installation_file_exists; then
	      download_installation_file
	  else
	      echo "ERROR: No remote installation file found. Abort"
	      abort
	  fi
      fi
      install_installation_file
   }
#+end_src

*** Installation file
The name of the installation file is specific to the software, its version and the target OS. Therefore a specific implementation is needed. For the template a dummy is used:
#+name: installation_file
#+begin_src shell
  installation_file() {
      echo installation.file
  }
#+end_src

*** Local installation file path
The path to the local installation file. The default location is in the ~/tmp/~ directory:
#+name: local_installation_file_path
#+begin_src shell
  local_installation_file_path() {
      echo /tmp/$(installation_file)
  }
#+end_src

*** Install installation file
The installation of the local installation file is specific to the software. For the template a dummy is used:
#+name: install_installation_file
#+begin_src shell
  install_installation_file() {
      echo "Install installation file"
	  case "$__sp_version" in
	  installation_fail) return 1
	     ;;
	  ,*) return 0
	     ;;
      esac
  }
#+end_src

*** Check, if remote installation file exists
Before downloading the installation file, check if it exists:
#+name: remote_installation_file_exists
#+begin_src shell
  remote_installation_file_exists() {
      curl -sIf $(download_url) >/dev/null
  }
#+end_src

*** Download URL
The download URL is specific to the software. For the template a dummy implementation is used:
#+name: download_url
#+begin_src shell
  download_url() {
      case "$__sp_version" in
	  download_fail) echo https://github.com/aaron-kunde/setup-project/blob/main/non-existing.file
	     ;;
	  ,*) echo https://github.com/aaron-kunde/setup-project/blob/main/README.org
	     ;;
      esac
  }
#+end_src

*** Download installation file
If a remote installation file was found, download it:
#+name: download_installation_file
#+begin_src shell
  download_installation_file() {
      echo "Download installation file"
      curl $(download_url) -o $(local_installation_file_path)
  }
#+end_src

** Abort installation
During the installation process, several errors can occurs, which cause the need to abort the installation process. If the process needs to be aborted, all global variables need to be reset, as if the installation process never had been started:
#+name: abort
#+begin_src shell
  abort() {
      restore_exported_vars
      reset_global_vars

      return 0
  }
#+end_src

** Print success message
The success message dependes of the installed software and must be implmenented specific:
#+name: print_success_message
#+begin_src shell
  print_success_message() {
      echo "TMPL successfully installed"
  }
#+end_src

* Tests
** Execute
#+begin_src shell
  test/bats/bin/bats -t test/test-template.bats
#+end_src
#+begin_src bats :tangle test/test-template.bats :mkdirp yes :noweb strip-export :shebang #!/usr/bin/env bats :tangle-mode '#o644 :exports none
  SPT_SCRIPT=src/setup-template.sh

  <<setup>>
  <<teardown>>

  <<Must print versions to install with default version>>
  <<Must print versions to install with given version>>
  <<Environment must be clean after execution if succeeds with default version>>
  <<Environment must be clean after execution if succeeds with given version>>
  <<Environment must be clean after execution if installation fails>>
  <<Should only print success message if version is already installed>>
  <<Should not alter environment if installation fails>>
  <<Must print error message if remote installation file not found>>
  <<Should try download if local installation file not exists>>
  <<Should try download if remote installation file exists>>

  # OS specific
  <<Should export variables if succeeds with default version>>
  <<Should export variables if succeeds with given version>>
  <<Should not alter environment if version is already installed>>
  <<Must print success message if installation succeeds>>
  <<Should not try download if local installation file exists>>
#+end_src

Each test needs a setup, which loads the necessary Bats libraries:
- [[https://github.com/bats-core/bats-support][bats-support]]
- [[https://github.com/bats-core/bats-assert][bats-assert]]
- [[https://github.com/bats-core/bats-file][bats-file]]

Furthermore, the exported variables are backed up. In this case at least the ~PATH~:
#+name: setup
#+begin_src bats
  setup() {
    load 'test_helper/bats-support/load'
    load 'test_helper/bats-assert/load'
    load 'test_helper/bats-file/load'

    SPT_ORIGINAL_PATH="$PATH"
  }
#+end_src

To clean up, the exported variables are reset to its saved values after each test:
#+name: teardown
#+begin_src bats
  teardown() {
      PATH="$SPT_ORIGINAL_PATH"
  }
#+end_src

** Test cases

*** Must print version and path to install
If wanted version is not the current, print the version to be installed and the path to be added.
**** With default version
#+name: Must print versions to install with default version
#+begin_src bats
  @test "Must print versions to install with default version" {
      run . $SPT_SCRIPT

      assert_line 'Install version: tmpl_default-version'
      assert_line "Add $HOME/opt/tmpl-tmpl_default-version to PATH"

      rm /tmp/installation.file
  }
#+end_src

**** With given version
#+name: Must print versions to install with given version
#+begin_src bats
  @test "Must print versions to install with given version" {
      run . $SPT_SCRIPT -v some_other-version

      assert_line 'Install version: some_other-version'
      assert_line "Add $HOME/opt/tmpl-some_other-version to PATH"

      rm /tmp/installation.file
  }
#+end_src

*** Environment must be clean after execution

**** If succeeds with default version
After the script has run without a given version, the newly introduced global variables shall not be set and ~$OPTIND~ must be ~1~:
#+name: Environment must be clean after execution if succeeds with default version
#+begin_src bats
  @test "Environment must be clean after execution if succeeds with default version" {
      . $SPT_SCRIPT

      assert_equal $OPTIND 1
      assert [ -z $__sp_installation_base_dir ]
      assert [ -z $__sp_version ]

      rm /tmp/installation.file
  }
#+end_src

**** If succeeds with given version
After the script has run with a given version, the newly introduced global variables shall not be set and ~$OPTIND~ must be ~1~:
#+name: Environment must be clean after execution if succeeds with given version
#+begin_src bats
  @test "Environment must be clean after execution if succeeds with given version" {
      . $SPT_SCRIPT -v some_other-version

      assert_equal $OPTIND 1
      assert [ -z $__sp_installation_base_dir ]
      assert [ -z $__sp_version ]

      rm /tmp/installation.file
  }
#+end_src

**** If installation fails
After the script failed, the newly introduced global variables shall not be set and ~$OPTIND~ must be ~1~:
#+name: Environment must be clean after execution if installation fails
#+begin_src bats
  @test "Environment must be clean after execution if installation fails" {
      . $SPT_SCRIPT -v installation_fail

      assert_equal $OPTIND 1
      assert [ -z $__sp_installation_base_dir ]
      assert [ -z $__sp_version ]

      rm /tmp/installation.file
  }
#+end_src

*** Should export variables
The exported ~$PATH~ must be extended with the wanted version.

**** If succeeds with default version

#+name: Should export variables if succeeds with default version
#+begin_src bats
  @test "Should export variables if succeeds with default version" {
      . $SPT_SCRIPT

      assert_equal "$PATH" "$HOME/opt/tmpl-tmpl_default-version:$SPT_ORIGINAL_PATH"

      rm /tmp/installation.file
  }
#+end_src

**** If succeeds with given version

#+name: Should export variables if succeeds with given version
#+begin_src bats
  @test "Should export variables if succeeds with given version" {
      . $SPT_SCRIPT -v some_other-version

      assert_equal "$PATH" "$HOME/opt/tmpl-some_other-version:$SPT_ORIGINAL_PATH"

      rm /tmp/installation.file
  }
#+end_src

*** Should only print success message, if version is already installed
If the given (or default) version is already installed, only a success message should be shown:
#+name: Should only print success message if version is already installed
#+begin_src bats
  @test "Should only print success message if version is already installed" {
      run . $SPT_SCRIPT -v installed

      refute_line -p "Add $HOME/opt/"
      refute_line -p 'Install version: '
      assert_line 'TMPL successfully installed'

      assert_file_not_exists /tmp/installation.file
  }
#+end_src

*** Should not alter environment, if version is already installed
If the given (or default) version is already installed, the environment should not be altered:
#+name: Should not alter environment if version is already installed
#+begin_src bats
  @test "Should not alter environment if version is already installed" {
      PATH="/some/new/path:$SPT_ORIGINAL_PATH"

      . $SPT_SCRIPT -v installed

      assert_equal $OPTIND 1
      assert [ -z $__sp_installation_base_dir ]
      assert [ -z $__sp_version ]
      assert_equal "$PATH" "/some/new/path:$SPT_ORIGINAL_PATH"
      assert_file_not_exists /tmp/installation.file
  }
#+end_src

*** Should not alter environment, if installation fails
After the script failed, the exported ~$PATH~ must not be altered:
#+name: Should not alter environment if installation fails
#+begin_src bats
  @test "Should not alter environment if installation fails" {
      . $SPT_SCRIPT -v installation_fail

      assert_equal "$PATH" "$SPT_ORIGINAL_PATH"

      rm /tmp/installation.file
  }
#+end_src

*** Must print success message if installation succeeds
If successful, a success message must be printed:
#+name: Must print success message if installation succeeds
#+begin_src bats
  @test "Must print success message if installation succeeds" {
      run . $SPT_SCRIPT

      assert_line 'TMPL successfully installed'

      rm /tmp/installation.file
  }
#+end_src

*** Must print error message, if remote installation file not found
#+name: Must print error message if remote installation file not found
#+begin_src bats
  @test "Must print error message if remote installation file not found" {
      run . $SPT_SCRIPT -v download_fail

      assert_line 'Install version: download_fail'
      assert_line 'Local installation file not found: /tmp/installation.file. Try, download new one'
      assert_line 'ERROR: No remote installation file found. Abort'
      # TODO: Should not be shown in real scripts
      # refute_line 'TMPL successfully installed'

      assert_file_not_exists /tmp/installation.file
  }
#+end_src

*** Should try download

**** If local installation file not exists
#+name: Should try download if local installation file not exists
#+begin_src bats
  @test "Should try download if local installation file not exists" {
      run . $SPT_SCRIPT

      assert_line 'Local installation file not found: /tmp/installation.file. Try, download new one'
      assert_line 'Download installation file'

      rm /tmp/installation.file
  }
#+end_src

**** If remote installation file exists
#+name: Should try download if remote installation file exists
#+begin_src bats
  @test "Should try download if remote installation file exists" {
      run . $SPT_SCRIPT

      assert_line 'Download installation file'

      rm /tmp/installation.file
  }
#+end_src

*** Should not try download, if local installation file exists
#+name: Should not try download if local installation file exists
#+begin_src bats
  @test "Should not try download if local installation file exists" {
      touch /tmp/installation.file

      run . $SPT_SCRIPT

      refute_line 'Local installation file not found: /tmp/installation.file. Try, download new one'
      refute_line 'Download installation file'

      rm /tmp/installation.file
  }
#+end_src
