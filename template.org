#+title: Template
* General approach
1. Set PATH and other installation relevant global variables for the specified version.
2. Check, whether this version is already installed.
   1. If yes, installation is complete.
   2. If not, check if an installation file for the current OS is present.
      1. I yes, install version with this installation file.
      2. If not, download correct installation file and proceed with step 2.1.
3. Clean up the global variables after installation, but not PATH

If something goes wrong, abort. This means, restore the PATH and other global variables:
#+name: definitions
#+begin_src shell :tangle src/setup-template.sh :mkdirp yes :noweb yes :shebang #!/bin/sh :tangle-mode '#o644 :exports none
  <<default_version>>
  <<init_global_vars>>
  <<reset_global_vars>>
#+end_src
#+name: execution
#+begin_src shell :tangle src/setup-template.sh :mkdirp yes :noweb strip-export
  init_global_vars

  echo "TODO: Not yet implemented"

  reset_global_vars
#+end_src

* Overriding of functions
The template can be included into the software specific scripts, where specific functions can be overridden.
*NOTE*: By including scripts, you have to be careful, with execution of scripts, since these are executed during the inclusion and therefore before anything else!

#+begin_src shell :tangle foo.sh
  f1() {
      echo "Foo f1: To override"
  }

  f2() {
      echo "Foo f2: Not to override"
  }

  # To override
  main() {
      f1
      f2
  }

  main
#+end_src
#+begin_src shell :tangle bar.sh
  . foo.sh

  f1() {
      echo "Bar f1: To override"
  }

  f3() {
      f2
      echo "Bar f3: Not to override"
  }

  main() {
      f1
      f3
  }

  main
#+end_src

* Global variables
Each script uses some global variables, like the version to install. These have to be initialized for each run of the script. The initialization of this variables might be the same for all scripts. The only exception is the definition of the [[Default version][default version]], which is described later:
#+name: init_global_vars
#+begin_src shell
  init_global_vars() {
      VERSION=$(default_version)
      INSTALLATION_BASE_DIR=$HOME/opt
      # Reset OPTIND, if getopts was used before
      OPTIND=1
  }
#+end_src

The reset of global variables depends on the initialization. It is necessary to clean up, after the script ran successful or was aborted, because of an error. If ~init_global_vars~ was adopted in a script,  ~reset_global_vars~ variables might need to be adjusted as well:
#+name: reset_global_vars
#+begin_src shell
  reset_global_vars() {
      unset VERSION
      unset INSTALLATION_BASE_DIR
      # Reset OPTIND for future use of getopts
      OPTIND=1
  }
#+end_src

** Default version
Since the strings for version (and therefore default version) are specific to the software, at least the function retrieving the default version has to be adapted in the particular scripts:
#+name: default_version
#+begin_src shell
  default_version() {
      echo tmpl_default-version
  }
#+end_src

** COMMENT PATH variables
#+begin_src shell
  reset_path_vars() {
      if [ -v SETUP_TMPL_ORIGINAL_PATH ]; then
	  export PATH="${SETUP_TMPL_ORIGINAL_PATH}"
	  unset SETUP_TMPL_ORIGINAL_PATH
      fi
  }
#+end_src
